#!/bin/bash
set -e
cd "$(dirname "$0")"/..

#
# This script generates ./assets/*/scale.yaml files
# which are a starting point for a scaling configuration.
#
# Note that these files have to be manually reviewed.
#

function scale {
  local input="../../../../third_party/helm/charts/$1/values.yaml"
  local output="assets/$2/scale.yaml"

  echo "debug: input=$input, output=$output"

  echo "" >"${output}"

  for key in $(yq eval '.. | select(key == "replicas" or key == "replication_factor" or key == "zoneAwareReplication" or key == "resources") | path | join(".")' "${input}"); do
    echo "debug: key=${key}"

    # set replicas=1
    if [[ "${key}" == *"replicas" ]]; then
      if [[ $(yq eval ".${key}" "${input}") == "0" ]]; then
        yq eval ".${key} = 0" --inplace "${output}"
      else
        yq eval ".${key} = 1" --inplace "${output}"
      fi
    fi

    # set replication_factor=1
    if [[ "${key}" == *"replication_factor" ]]; then
      yq eval ".${key} = 1" --inplace "${output}"
    fi

    # set zoneAwareReplication.enabled=false
    if [[ "${key}" == *"zoneAwareReplication" ]]; then
      yq eval ".${key}.enabled = false" --inplace "${output}"
    fi

    # set resources=1m 1Mi
    if [[ "${key}" == *"resources" ]]; then
      yq eval ".${key}.requests.cpu = \"1m\"" --inplace "${output}"
      yq eval ".${key}.requests.memory = \"1Mi\"" --inplace "${output}"
      yq eval ".${key}.limits = {}" --inplace "${output}"
    fi
  done
}

scale grafana grafana
scale loki loki
scale mimir-distributed mimir
scale tempo-distributed tempo
