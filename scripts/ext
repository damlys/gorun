#!/bin/bash
set -e
for lib in "$(dirname "$0")"/lib/*.bash; do source "${lib}"; done

function main {
  local cmd="$1"
  local project_path="$2"

  case "${cmd}" in
  "download-helm-charts")
    rm -rf "${project_path}/helm/charts"/*

    log::info "downloading"
    yq --inplace ".dependencies |= sort_by(.name)" "${project_path}/helm/Chart.yaml"
    helm dependency update "${project_path}/helm"

    for package_path in "${project_path}/helm/charts"/*.tgz; do
      log::info "unpackaging: ${package_path}"
      tar --directory="${project_path}/helm/charts" -xf "${package_path}"
    done

    rm -f "${project_path}/helm/charts"/*.tgz

    rm -f "${project_path}/helm"/reset.*.yaml

    for chart_path in "${project_path}/helm/charts"/*; do
      local chart_name
      local input_path
      local output_path
      chart_name="$(basename "$chart_path")"
      input_path="${chart_path}/values.yaml"
      output_path="${chart_path}/../../reset.${chart_name}.yaml"

      echo "" >"${output_path}"

      for key in $(yq eval '.. | select(key == "replicas" or key == "replication_factor" or key == "zoneAwareReplication" or key == "resources") | path | join(".")' "${input_path}"); do
        echo "debug: key=${key}"

        # set replicas=1
        if [[ ".${key}" == *".replicas" ]]; then
          if [[ $(yq eval ".${key}" "${input_path}") == "0" ]]; then
            yq eval ".${key} = 0" --inplace "${output_path}"
          else
            yq eval ".${key} = 1" --inplace "${output_path}"
          fi
        fi

        # set replication_factor=1
        if [[ ".${key}" == *".replication_factor" ]]; then
          yq eval ".${key} = 1" --inplace "${output_path}"
        fi

        # set zoneAwareReplication.enabled=false
        if [[ ".${key}" == *".zoneAwareReplication" ]]; then
          yq eval ".${key}.enabled = false" --inplace "${output_path}"
        fi

        # set resources=1m 1Mi
        if [[ ".${key}" == *".resources" ]]; then
          yq eval ".${key}.requests.cpu = \"1m\"" --inplace "${output_path}"
          yq eval ".${key}.requests.memory = \"1Mi\"" --inplace "${output_path}"
          yq eval ".${key}.limits = {}" --inplace "${output_path}"
        fi
      done
    done

    log::info "done"
    ;;

  *)
    log::error "unknown command: ${cmd}"
    return 127
    ;;
  esac
}

main "$@"
